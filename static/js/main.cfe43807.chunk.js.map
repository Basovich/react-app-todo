{"version":3,"sources":["contextTodo.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodoAdd/TodoAdd.js","components/TodoChange/TodoChange.js","reducer.js","App.js","reportWebVitals.js","index.js"],"names":["TodoContext","React","createContext","TodoItem","todo","index","dispatch","useContext","openChangeForm","openAddForm","text","className","title","project","priority","description","type","onClick","e","_this","currentTarget","closest","querySelector","classList","toggle","textContent","contains","payload","TodoList","props","todos","map","useInputValue","defaultValue","useState","value","setValue","bind","onChange","event","target","clear","TodoAdd","visibleForm","toggleAddForm","clearForm","placeholder","disabled","TodoChange","setTitle","setProject","setDescription","setPriority","useEffect","id","reducer","state","action","Date","now","newState","forEach","push","filter","i","App","data","JSON","parse","localStorage","getItem","useReducer","changeForm","setChangeForm","setVisibleForm","setItem","stringify","error","alert","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfe43807.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TodoContext = React.createContext()\r\n\r\nexport default TodoContext;","import React, { useContext } from 'react';\r\nimport './TodoItem.scss'\r\nimport PropTypes from 'prop-types';\r\nimport TodoContext from '../../contextTodo'\r\n\r\n\r\nfunction TodoItem({ todo, index }) {\r\n    const { dispatch } = useContext(TodoContext);\r\n    const { openChangeForm } = useContext(TodoContext);\r\n    const { openAddForm } = useContext(TodoContext);\r\n\r\n    const text = {\r\n        isHidden: 'Показати опис',\r\n        isVisible: 'Приховати опис',\r\n    }\r\n\r\n    function toggleDescription(e) {\r\n        const _this = e.currentTarget;\r\n        const todo = _this.closest('.todo');\r\n        const description = todo.querySelector('.todo__description');\r\n        description.classList.toggle('is-visible');\r\n        _this.textContent = description.classList.contains('is-visible') ? text.isVisible : text.isHidden;\r\n    }\r\n\r\n    return (        \r\n        <li className=\"todo\"> \r\n            <p className=\"todo__title\">{todo.title}</p>  \r\n            <div className=\"todo__info\">\r\n                <p className=\"todo__project\">\r\n                    <b>Проект: </b> \r\n                    <span className=\"todo__project-name\">{todo.project}</span>\r\n                </p>\r\n                <p className=\"todo__priority\">\r\n                    <b>Пріорітет: </b> \r\n                    <span className=\"todo__priority-number\">{todo.priority}</span>\r\n                </p>\r\n            </div>\r\n            <div className=\"todo__description\">\r\n                <b className=\"todo__description-title\">Опис:</b>\r\n                <p className=\"todo__description-text\">{todo.description}</p>                \r\n            </div>\r\n            <div className=\"todo__button-group\">\r\n                <button className=\"todo__button todo__button-change\" \r\n                    type=\"button\"\r\n                    onClick={ () => {\r\n                        openAddForm(false);\r\n                        openChangeForm(index);\r\n                    }}>\r\n                    Змінити завдання\r\n                </button>\r\n\r\n                <button className=\"todo__button todo__button--more\" \r\n                    type=\"button\" \r\n                    onClick={toggleDescription}>\r\n                    Показати опис\r\n                </button>\r\n\r\n                <button className=\"todo__button todo__button--error\" \r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                        openChangeForm(false);\r\n                        dispatch({\r\n                            type: 'remove',\r\n                            payload: index\r\n                        })\r\n                    }}>\r\n                    Видалити завдання\r\n                </button>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    index: PropTypes.number.isRequired\r\n}\r\n\r\nexport default TodoItem","import React from 'react';\r\nimport './TodoList.scss';\r\nimport TodoItem from '../TodoItem/TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction TodoList (props) {\r\n    const todos = props.todos;\r\n \r\n    return (\r\n            <ul className=\"todo-list\">\r\n                {todos.map((todo, index) => {\r\n                    return (\r\n                        <TodoItem \r\n                            key={index} \r\n                            todo={todo}\r\n                            index={index}\r\n                        />\r\n                    )               \r\n                })}\r\n            </ul>\r\n    )\r\n}\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired\r\n}\r\n\r\n\r\nexport default TodoList\r\n","import React, {useContext, useState} from 'react';\r\nimport './TodoAdd.scss'\r\nimport TodoContext from '../../contextTodo'\r\n\r\n// обьявляем кастомный хук для всех инпутов,\r\n// хук не уменьшил на много код,\r\n// но я попробовал сам сделать хук + одно действие контролириуем в одном месте\r\nfunction useInputValue(defaultValue) {\r\n    const [value, setValue] = useState(defaultValue);\r\n    const onChange = event => {\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    const clear = () => setValue('');\r\n\r\n    return {\r\n        bind: {value, onChange},\r\n        value,\r\n        clear\r\n    }\r\n}\r\n\r\n\r\nfunction TodoAdd() {\r\n    const { dispatch } = useContext(TodoContext);\r\n    const { openChangeForm } = useContext(TodoContext);\r\n    const { openAddForm } = useContext(TodoContext);\r\n    const { visibleForm } = useContext(TodoContext);\r\n\r\n    const title = useInputValue('');\r\n    const project = useInputValue('');\r\n    const description = useInputValue('');\r\n    const priority = useInputValue('default');\r\n\r\n    function toggleAddForm() {\r\n        openAddForm(!visibleForm);\r\n        clearForm();\r\n    }\r\n\r\n    function clearForm() {\r\n        title.clear();\r\n        project.clear();\r\n        description.clear();\r\n        priority.clear();\r\n    }\r\n\r\n    function showButton() {\r\n        return (\r\n            <div className=\"todo__button-group todo__button-group--right mt-20 todo-button-add\">\r\n                <button className=\"todo__button todo__button-change\"\r\n                    type=\"button\"\r\n                    onClick={ () => {\r\n                        toggleAddForm();\r\n                        openChangeForm(false);\r\n                    }}>\r\n                    Додати завдання\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function showForm() {\r\n        return (\r\n            <>\r\n                <h2>Додати нове завдання</h2>\r\n                <form className=\"todo-add\">\r\n                    <label className=\"pure-material-textfield-outlined\">\r\n                        <input placeholder=\" \" value={title.bind.value} onChange={title.bind.onChange}/>\r\n                        <span>Назва завдання</span>\r\n                    </label>\r\n                    <label className=\"pure-material-textfield-outlined\">\r\n                        <input placeholder=\" \" value={project.bind.value} onChange={project.bind.onChange} />\r\n                        <span>Назва проекту</span>\r\n                    </label>\r\n\r\n                    <label className=\"pure-material-textfield-outlined\">\r\n                        <textarea placeholder=\" \" value={description.bind.value} onChange={description.bind.onChange} />\r\n                        <span>Опис проекту</span>\r\n                    </label>\r\n                    <div className=\"select\">\r\n                        <select className=\"select-text\" value={priority.bind.value} onChange={priority.bind.onChange} >\r\n                            <option value=\"default\" disabled>Оберіть пріорітет</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"todo__button-group todo__button-group--right mt-20\">\r\n                        <button className=\"todo__button todo__button-change\"\r\n                            type=\"button\"\r\n                            onClick={() => {\r\n                                dispatch({\r\n                                    type: 'add',\r\n                                    payload: {\r\n                                        title: title.value,\r\n                                        project: project.value,\r\n                                        description: description.value,\r\n                                        priority: priority.value\r\n                                    }\r\n                                });\r\n\r\n                                clearForm();\r\n                            }}>\r\n                            Зберегти\r\n                    </button>\r\n                        <button className=\"todo__button todo__button--error\"\r\n                            type=\"button\"\r\n                            onClick={toggleAddForm}>\r\n                            Відмінити\r\n                    </button>\r\n                    </div>\r\n                </form>    \r\n            </>            \r\n        )\r\n    }\r\n\r\n    return (      \r\n        <div className='todo-add-wrap'>         \r\n            {visibleForm ? showForm() : showButton()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoAdd","import React, { useState, useContext, useEffect } from 'react';\r\nimport './TodoChange.scss'\r\nimport TodoContext from '../../contextTodo'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction TodoChange(props) {\r\n    const { openChangeForm } = useContext(TodoContext);\r\n    const { dispatch } = useContext(TodoContext);\r\n\r\n    \r\n    const [title, setTitle] = useState(props.todo.title);\r\n    const [project, setProject] = useState(props.todo.project);\r\n    const [description, setDescription] = useState(props.todo.description);\r\n    const [priority, setPriority] = useState(props.todo.priority);\r\n\r\n    useEffect(() => {\r\n        setTitle(props.todo.title);\r\n        setProject(props.todo.project);\r\n        setDescription(props.todo.description);\r\n        setPriority(props.todo.priority);\r\n    }, [props]);\r\n\r\n    return (       \r\n        <>\r\n            <h2>Змінити завдання</h2>\r\n            <form className=\"todo-change-wrap\">\r\n                <label className=\"pure-material-textfield-outlined\">\r\n                    <input placeholder=\" \" \r\n                        value={title} \r\n                        onChange={event => setTitle(event.currentTarget.value)} \r\n                    />\r\n                    <span>Назва завдання</span>\r\n                </label>\r\n                <label className=\"pure-material-textfield-outlined\">\r\n                    <input placeholder=\" \"\r\n                        value={project}\r\n                        onChange={event => setProject(event.target.value)}\r\n                    />\r\n                    <span>Назва проекту</span>\r\n                </label>\r\n\r\n                <label className=\"pure-material-textfield-outlined\">\r\n                    <textarea placeholder=\" \" \r\n                        value={description}\r\n                        onChange={event => setDescription(event.target.value)}\r\n                    />\r\n                    <span>Опис проекту</span>\r\n                </label>\r\n                <div className=\"select\">\r\n                    <select className=\"select-text\"\r\n                        value={priority}\r\n                        onChange={event => setPriority(event.target.value)}>\r\n                        <option value=\"default\" disabled>Оберіть пріорітет</option>\r\n                        <option value=\"1\">1</option>\r\n                        <option value=\"2\">2</option>\r\n                        <option value=\"3\">3</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"todo__button-group todo__button-group--right mt-20\">\r\n                    <button className=\"todo__button todo__button-change\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                            dispatch({\r\n                                type: 'change',\r\n                                payload: {\r\n                                    title,\r\n                                    project,\r\n                                    description,\r\n                                    priority,\r\n                                    id: props.todo.id                                    \r\n                                }\r\n                            });\r\n                        }}>\r\n                        Зберегти\r\n                    </button>\r\n                    <button className=\"todo__button todo__button--error\"\r\n                        type=\"button\" \r\n                        onClick={ () => {\r\n                            openChangeForm(false);\r\n                        }}>\r\n                        Відмінити\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </>           \r\n    )\r\n}\r\n\r\nTodoChange.propTypes = {\r\n    todo: PropTypes.object.isRequired  \r\n}\r\n\r\n\r\nexport default TodoChange","function reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'add':\r\n            return [\r\n                ...state,\r\n                {\r\n                    id: Date.now(),\r\n                    title: action.payload.title,\r\n                    project: action.payload.project,\r\n                    description: action.payload.description,\r\n                    priority: action.payload.priority\r\n                }\r\n            ]\r\n            \r\n        case 'change':        \r\n            let newState = [];\r\n            state.forEach(todo => {\r\n                if (todo.id !== action.payload.id) {\r\n                    newState.push(todo);\r\n                } else {\r\n                    newState.push({\r\n                        id: action.payload.id,\r\n                        title: action.payload.title,\r\n                        project: action.payload.project,\r\n                        description: action.payload.description,\r\n                        priority: action.payload.priority\r\n                    });\r\n                }\r\n            })\r\n            return newState\r\n          \r\n        case 'remove':          \r\n            return state.filter( (todo, i) => action.payload !== i )\r\n\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport {reducer}","import React, {useState, useEffect, useReducer} from 'react';\nimport TodoList from './components/TodoList/TodoList';\nimport TodoAdd from './components/TodoAdd/TodoAdd';\nimport TodoChange from './components/TodoChange/TodoChange';\n// import TodoFilter from './components/TodoFilter/TodoFilter';\nimport TodoContext from './contextTodo';\nimport {reducer} from './reducer';\n\nfunction App() {\n\tconst data = JSON.parse(localStorage.getItem(\"todos\")) || [];\n\tconst [state, dispatch] = useReducer(reducer, data);\n\n\tconst [changeForm, setChangeForm] = useState(false);\n\n\tfunction openChangeForm(index) {\n\t\tindex === false ? setChangeForm(false) : setChangeForm(state[index]);\n\t}\n\n\tconst [visibleForm, setVisibleForm] = useState(false);\n\n\tfunction openAddForm(visibleForm) {\n\t\tsetVisibleForm(visibleForm);\n\t}\n\n\tuseEffect(() => {\n\t\ttry {\n\t\t\tlocalStorage.setItem('todos', JSON.stringify(state));\n\t\t} catch (error) {\n\t\t\talert(error);\n\t\t}\n\n\t\tsetChangeForm(false);\n\t}, [state]);\n\n\treturn (\n\t\t<TodoContext.Provider value={{dispatch, openChangeForm, openAddForm, visibleForm}}>\n\t\t\t<div className='wrapper'>\n\t\t\t\t<h1>Перелік завдань</h1>\n\t\t\t\t<TodoList todos={state}/>\n\t\t\t\t{/*<TodoFilter todos={state} />  */}\n\t\t\t\t{changeForm ? <TodoChange todo={changeForm}/> : null}\n\t\t\t\t<TodoAdd/>\n\t\t\t</div>\n\t\t</TodoContext.Provider>\n\t);\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}